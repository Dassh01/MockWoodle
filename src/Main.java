import java.io.File;import java.io.FileNotFoundException;import java.util.ArrayList;import java.util.Arrays;import java.util.Random;import java.util.Scanner;public class Main extends beaUtils {    /**     * Tutorial to what the colored numbers mean     */    private static final String infoText = "\nThe number in " + GREEN + "green " + RESET + "corresponds to the amount of letters that match the session word" +            "\nThe number in " + YELLOW + "yellow " + RESET + "corresponds to the amount of letters that are present in your word and ALSO present in the session word but not in the right place" +            "\nThe white number corresponds to the guess # your word was tried in" +            "\n\nType -help to display this info again";    /**     * Draws a random word from src/words     * @param file "words" file     * @return The word, being a 5-letter string     * @throws FileNotFoundException Necessary for scanner to work without try/catch     */    private static String grabWord(File file) throws FileNotFoundException {        Scanner wordGrabber = new Scanner(file);        ArrayList<String> words = new ArrayList<>();        while (wordGrabber.hasNextLine()) {            words.add(wordGrabber.nextLine());        }        int posToGrab = new Random().nextInt(words.size());        return words.get(posToGrab);    }    /**     * This method is tied to the green number, gets the number of letters that are aligned to the session word     * @param userInp String from user to be compared against sessionWord     * @param sessionWord Will be compared against user input     * @return [int] The number of letters in the correct position     */    private static int getAmountOfLettersInCorrectPosition(String userInp, String sessionWord) {        int amountOfLettersInCorrectPosition = 0;        for (int pos = 0; pos < 5; ++pos) {            if (userInp.substring(pos, pos + 1).equals(sessionWord.substring(pos, pos + 1))) {                ++amountOfLettersInCorrectPosition;            }        }        return amountOfLettersInCorrectPosition;    }    /**     * This method is tied to the yellow number, gets the number of letters that are in present in the session word and the user input but in the wrong placement     * @param userInp String from user to be compared against sessionWord     * @param sessionWord Will be compared against user input     * @return [int] The number of letters present in the word but in the wrong position     */    private static int getLettersPresentInWordButInWrongPlace(String userInp, String sessionWord) {        int amountOfLettersPresentInWord = 0;        ArrayList<Integer> positionsToSkip = new ArrayList<>();        for (int pos = 0; pos < 5; ++pos) {            if (userInp.substring(pos, pos + 1).equals(sessionWord.substring(pos, pos + 1))) {                positionsToSkip.add(pos);            }        }        ArrayList<String> lettersAlreadyLogged = new ArrayList<>();        String currentLetter;        for (int pos = 0; pos < 5; ++pos) {            currentLetter = userInp.substring(pos, pos + 1);            if (positionsToSkip.contains(pos) || lettersAlreadyLogged.contains(currentLetter)) {                continue;            }            if (sessionWord.indexOf(currentLetter) != -1) {                ++amountOfLettersPresentInWord;                lettersAlreadyLogged.add(currentLetter);            }        }        return amountOfLettersPresentInWord;    }    /**     * Polls the user over and over until they enter a proper 5 word looking string     * @param systemInputScanner Scanner connected to System.in     * @param sessionWord Session word -- Used for -sesw     * @return User input     */    private static String forceFiveLetterWord(Scanner systemInputScanner,String sessionWord) {        String userGuess = "!";        System.out.println();        while (!(userGuess.length() == 5 && onlyContainsAlphabeticalCharacters(userGuess))) {            userGuess = askForThing("Enter a 5 letter word: ", Scanner::nextLine, systemInputScanner);            if (userGuess.substring(0,1).equals("-")) {                switch (userGuess.substring(1,5)) {                    case ("help"):                        System.out.println(infoText);                        break;                    case ("sesw"):                        System.out.println("\nSession word: "+sessionWord);                        break;                }            }        }        return userGuess;    }    /**     * Prints the previous guesses arraylist in a nice looking box     * @param previousGuesses String arraylist containing previous guesses     */    private static void displayPreviousGuesses(ArrayList<String> previousGuesses) {        if (!previousGuesses.isEmpty()) {System.out.println("+-------------+");}        for (int i = 0; i < previousGuesses.size(); ++i) {            System.out.println("| " + i + " " + previousGuesses.get(i) + " |");        }        if (!previousGuesses.isEmpty()) {System.out.println("+-------------+");}    }    /**     * This 100% doesn't need to be a function C:     */    private static void clearConsole() {        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");    }    /**     * Iterate through a string and make sure no characters are symbols or numbers     * @param string String to be checked     * @return false if string contained non alphabetical characters, true if string     */    private static boolean onlyContainsAlphabeticalCharacters(String string) {       ArrayList<String> alphabet = new ArrayList<>(Arrays.asList("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",               "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"));        for (int i = 0; i < string.length(); i++) {            String letter = string.substring(i, i + 1);            if (!alphabet.contains(letter)) {                return false;            }        }        return true;    }    public static void main(String[] args) throws FileNotFoundException{        //Declare objects        ArrayList<String> previousGuesses = new ArrayList<>();        Scanner sysinp = new Scanner(System.in);        final File wordsLib = new File("src/words");        //Declare variable outside of loop to save garbage collector some effort        String sessionWord = grabWord(wordsLib);        String userGuess;        String lettersInCorrectPos;        String lettersPresentInWord;        String formattedGuess;        System.out.println(infoText);        while (true) {            //Take user input            userGuess = forceFiveLetterWord(sysinp,sessionWord);            //Display stuffs            clearConsole();            displayPreviousGuesses(previousGuesses);            //Base variables off of user input            lettersInCorrectPos = " " + GREEN + getAmountOfLettersInCorrectPosition(userGuess,sessionWord) + RESET;            lettersPresentInWord = " " + YELLOW + getLettersPresentInWordButInWrongPlace(userGuess,sessionWord) + RESET;            formattedGuess = userGuess + lettersInCorrectPos + lettersPresentInWord;            //If the user got it wrong            if (!userGuess.equalsIgnoreCase(sessionWord)) {                previousGuesses.add(formattedGuess);                System.out.println(formattedGuess);            }            //If the user got it right            else {                if (userInputBoolean(askForThing("\nCorrect! Play again? (y/n): ",Scanner::nextLine, sysinp))) {                    sessionWord = grabWord(wordsLib);                    previousGuesses.clear();                }                else {                    //Kill loop                    break;                }            }        }    }}