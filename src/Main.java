import java.io.File;import java.io.FileNotFoundException;import java.util.ArrayList;import java.util.Random;import java.util.Scanner;public class Main extends beaUtils {    /**     * Tutorial to what the colored numbers mean     */    private static final String infoText = "\nThe number in " + GREEN + "green " + RESET + "corresponds to the amount of letters that match the session word" +            "\nThe number in " + YELLOW + "yellow " + RESET + "corresponds to the amount of letters that are present in your word and ALSO present in the session word but not in the right place" +            "\nThe white number corresponds to the guess # your word was tried in" +            "\n\nType -help to display this info again";    /**     * Controls if the debug stream is displayed     */    private static boolean debug = false;    /**     * Draws a random word from src/words     * @param file "words" file     * @return The word, being a 5-letter string     * @throws FileNotFoundException Necessary for scanner to work without try/catch     */    private static String grabWord(File file) throws FileNotFoundException {        Scanner wordGrabber = new Scanner(file);        ArrayList<String> words = new ArrayList<>();        while (wordGrabber.hasNextLine()) {            words.add(wordGrabber.nextLine());        }        int posToGrab = new Random().nextInt(words.size());        return words.get(posToGrab);    }    /**     * This method is tied to the green number, gets the number of letters that are aligned to the session word     * @param userInp String from user to be compared against sessionWord     * @param sessionWord Will be compared against user input     * @return [int] The number of letters in the correct position     */    private static int getAmountOfLettersInCorrectPosition(String userInp, String sessionWord) {        int amountOfLettersInCorrectPosition = 0;        for (int pos = 0; pos < 5; ++pos) {            if (userInp.substring(pos, pos + 1).equals(sessionWord.substring(pos, pos + 1))) {                ++amountOfLettersInCorrectPosition;            }        }        return amountOfLettersInCorrectPosition;    }    /**     * This method is tied to the yellow number, gets the number of letters that are in present in the session word and the user input but in the wrong placement     * @param userInp String from user to be compared against sessionWord     * @param sessionWord Will be compared against user input     * @return [int] The number of letters present in the word but in the wrong position     */    private static int getLettersPresentInWordButInWrongPlace(String userInp, String sessionWord) {    int amountOfLettersPresentInWord = 0;    boolean foundMatchingCharacter;    //Convert to stringbuilders C:    StringBuilder userInpAsStringBuilder = new StringBuilder(userInp);    StringBuilder sessionWordAsStringBuilder = new StringBuilder(sessionWord);    //Phase 1    //Removal of characters in correct position    for (int pos = 0; pos < 5; ++pos) {        if (userInpAsStringBuilder.charAt(pos) == sessionWordAsStringBuilder.charAt(pos)) {            userInpAsStringBuilder.setCharAt(pos, '\0');            sessionWordAsStringBuilder.setCharAt(pos, '\0');        }    }    //Phase 2    boolean fullyFactored = false;    if (debug) {        System.out.println("Factored strings:\nUserGuess= "+userInpAsStringBuilder+"\nSessionWord= "+sessionWordAsStringBuilder);        if (isFullyNull(sessionWordAsStringBuilder.toString()) || isFullyNull(userInpAsStringBuilder.toString())) {            fullyFactored = true;        }    }    for (int pos = 0; pos < userInpAsStringBuilder.length(); ++pos) {        char currentLetter = userInpAsStringBuilder.charAt(pos);        if (debug && !fullyFactored) {            System.out.println("-------------------\n" +                    userInpAsStringBuilder + " [Looking at character: " + currentLetter + "]\n" +                    sessionWordAsStringBuilder + " [Position in user word index comparison: " + (pos+1) + "]");        }        if (currentLetter != '\0' && sessionWordAsStringBuilder.toString().indexOf(currentLetter) != -1) {            foundMatchingCharacter = true;            //Position to wipe character from in session word            int positionOfLetterPresentInSessionWord = sessionWordAsStringBuilder.toString().indexOf(currentLetter);            //Characters "wiped" from caches by setting value of character to null            userInpAsStringBuilder.setCharAt(pos, '\0');            sessionWordAsStringBuilder.setCharAt(positionOfLetterPresentInSessionWord, '\0');            ++amountOfLettersPresentInWord;        }        else {            foundMatchingCharacter = false;        }        if (debug && !fullyFactored) {            System.out.println("Character located in session word ? " + (foundMatchingCharacter ? "TRUE: nullifying character in both instances" : "FALSE: proceeding...") + "\n-------------------");        }    }    if (debug && fullyFactored) {        System.out.println("Words are the same! Proceeding");    }    return amountOfLettersPresentInWord;}    /**     * Iterates through a string to see if it entirely consists of Unicode null characters     * @param string String to be checked     * @return true if all characters are null, false if not     */    private static boolean isFullyNull (String string) {        StringBuilder stringAsStringBuilder = new StringBuilder(string);        for (int i = 0; i < stringAsStringBuilder.length(); ++i) {            char letter = stringAsStringBuilder.charAt(i);            //Casting a character to an integer gets its Unicode value            //A null character's Unicode value is 0            if ( !( ( (int) letter ) == 0) ) {                return false;            }        }        return true;    }    /**     * Polls the user over and over until they enter a proper five-word looking string     * @param systemInputScanner Scanner connected to System.in     * @param sessionWord Session word -- Used for -sesw     * @return User input     */    private static String forceFiveLetterWord(Scanner systemInputScanner,String sessionWord) {        String userGuess;        System.out.println();        //Initialize with value (can be any symbol really) as to not freak out the while loop        StringBuilder userGuessAsStringBuilder = new StringBuilder("!");        //Continue polling user until they enter a "word" that has 5 letters and onlyAlphabeticalCharacters        while (!(userGuessAsStringBuilder.length() == 5 && onlyContainsAlphabeticalCharacters(userGuessAsStringBuilder.toString()))) {            //Polling            userGuess = askForThing("Enter a 5 letter word: ", Scanner::nextLine, systemInputScanner);            userGuessAsStringBuilder = new StringBuilder(userGuess);            //Command handler            if (userGuessAsStringBuilder.charAt(0) == '-') {                switch (userGuess.substring(1,userGuessAsStringBuilder.length())) {                    case ("cmds"):                        System.out.println("""                                \nCommands:                                Help: -help                                Get Session word: -sesw                                Toggle debug mode: -debug                                """);                        break;                    case ("help"):                        System.out.println(infoText);                        break;                    case ("sesw"):                        System.out.println("\nSession word: "+sessionWord);                        break;                    case ("debug"):                        debug = !debug;                        System.out.println("Debug: " + !debug + " -> " + debug);                }            }        }        return userGuessAsStringBuilder.toString();    }    /**     * Prints the previous guesses arraylist in a nice looking box     * @param previousGuesses String arraylist containing previous guesses     */    private static void displayPreviousGuesses(ArrayList<String> previousGuesses) {        if (!previousGuesses.isEmpty()) {System.out.println("+-------------+");}        for (int i = 0; i < previousGuesses.size(); ++i) {            System.out.println("| " + i + " " + previousGuesses.get(i) + " |");        }        if (!previousGuesses.isEmpty()) {System.out.println("+-------------+");}    }    /**     * This 100% doesn't need to be a function C:     */    private static void clearConsole() {        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");    }    /**     * Iterate through a string and make sure no characters are symbols or numbers     * @param string String to be checked     * @return false if string contained non-alphabetical characters, true if string     */    private static boolean onlyContainsAlphabeticalCharacters(String string) {       StringBuilder stringAsStringBuilder = new StringBuilder(string);        for (int i = 0; i < string.length(); i++) {            char letter = stringAsStringBuilder.charAt(i);            if (!Character.isAlphabetic(letter)) {                return false;            }        }        return true;    }    public static void main(String[] args) throws FileNotFoundException{        //Declare objects        ArrayList<String> previousGuesses = new ArrayList<>();        Scanner sysinp = new Scanner(System.in);        final File wordsLib = new File("src/words");        //Declare variable outside of loop to save garbage collector some effort        String sessionWord = grabWord(wordsLib);        String userGuess;        String lettersInCorrectPos;        String lettersPresentInWord;        String formattedGuess;        System.out.println(infoText);        while (true) {            //Take user input            userGuess = forceFiveLetterWord(sysinp,sessionWord);            //From this point on, only userGuessAsStringBuilder.toString(); will be called            //Smith YOU did this with your silly project requirements            StringBuilder userGuessAsStringBuilder = new StringBuilder(userGuess);            //Display stuffs            clearConsole();            displayPreviousGuesses(previousGuesses);            //Base variables off of user input            lettersInCorrectPos = " " + GREEN + getAmountOfLettersInCorrectPosition(userGuessAsStringBuilder.toString(),sessionWord) + RESET;            lettersPresentInWord = " " + YELLOW + getLettersPresentInWordButInWrongPlace(userGuessAsStringBuilder.toString(),sessionWord) + RESET;            formattedGuess = userGuessAsStringBuilder + lettersInCorrectPos + lettersPresentInWord;            //If the user got it wrong            if (userGuess.equalsIgnoreCase(sessionWord)) {                previousGuesses.add(formattedGuess);                System.out.println("\n"+formattedGuess);            }            //If the user got it right            else {                if (userInputBoolean(askForThing("\nCorrect! Play again? (y/n): ",Scanner::nextLine, sysinp))) {                    sessionWord = grabWord(wordsLib);                    previousGuesses.clear();                }                else {                    //Kill loop                    break;                }            }        }    }}